#!/usr/bin/env python3

import json
import os
from collections import defaultdict
import argparse
import csv

server_url = os.getenv("GITHUB_SERVER_URL", "https://github.com")
repo = os.getenv("GITHUB_REPOSITORY", "")
sha = os.getenv("GITHUB_SHA", "")

argp = argparse.ArgumentParser(description="A tool to generate a report using complexity, coverage, and sarif data")
argp.add_argument("-x","--complexity",help="Location of compltexity report generated by Lizard")
argp.add_argument("-c","--coverage",help="Location of Coverage CSV file")
argp.add_argument("-s","--sarif",help="Location of SARIF file")
argr = argp.parse_args()

# Load complexity data (function-level from Lizard JSON)
with open(argr.complexity, "r") as f:
    complexity_data = json.load(f)

coverage_data = []
with open(argr.coverage, "r") as f:
    coverage_data = json.load(f)

# Load Semgrep SARIF results
with open(argr.sarif) as f:
    semgrep = json.load(f)

critical_findings = defaultdict(list)
for result in semgrep["runs"][0]["results"]:
    location = result["locations"][0]["physicalLocation"]
    file_path = location["artifactLocation"]["uri"]
    rule = result["ruleId"]
    level = result.get("level", "warning")
    line_num = location.get("region", {}).get("startLine", 1)

    if level == "error":
        critical_findings[file_path].append({"rule": rule, "line": line_num})

print("# Developer Pain Point Report\n")

high_risk_functions = []
security_risk_functions = []

def get_func_coverage(coverage_data, filename, func_name, start_line):
    for file_d in coverage_data:
        filename_cmp = file_d["filename"]
        #print(f"comparing {filename_cmp} and {filename}")
        if filename == filename_cmp:
            
            func_coverage_d = file_d["function_coverage"]
            for func_d in func_coverage_d:
                line_num = func_d["line_number"]
                if start_line == line_num:
                    hit_count = func_d["hit_count"]
                    return hit_count
    return 0

# Analyze each function
for file_data in complexity_data:
    print(f"wtf: {file_data.keys()}")
    filename = file_data["filename"]

    for func in file_data.get("function_list", []):
        func_name = func["name"]
        ccn = func["cyclomatic_complexity"]
        start_line = func["start_line"]
        end_line = func["end_line"]

        # Estimate function-level coverage
        func_coverage = get_func_coverage(coverage_data, filename, func_name, start_line)

        # Create permalink to specific function
        permalink = (
            f"{server_url}/{repo}/blob/{sha}/{filename}#L{start_line}-L{end_line}"
        )

        # Check for critical findings in this function's range
        func_findings = []
        for finding in critical_findings.get(filename, []):
            if start_line <= finding["line"] <= end_line:
                func_findings.append(finding["rule"])

        # High complexity + low coverage = high risk
        if ccn >= 15 and func_coverage < 50:
            high_risk_functions.append(
                {
                    "name": func_name,
                    "file": filename,
                    "permalink": permalink,
                    "ccn": ccn,
                    "coverage": func_coverage,
                    "findings": func_findings,
                }
            )

        # Has coverage but critical security findings
        elif func_findings and func_coverage > 0:
            security_risk_functions.append(
                {
                    "name": func_name,
                    "file": filename,
                    "permalink": permalink,
                    "coverage": func_coverage,
                    "findings": func_findings,
                }
            )

# Output prioritized report
print("## ðŸš¨ High Risk Functions (Complex + Untested)\n")
if high_risk_functions:
    for func in sorted(high_risk_functions, key=lambda x: x["ccn"], reverse=True):
        print(f"- **[`{func['name']}()`]({func['permalink']})** in `{func['file']}`")
        print(f"  - Complexity: **{func['ccn']}** (high)")
        print(f"  - Coverage: **{func['coverage']:.1f}%** (low)")
        if func["findings"]:
            print(f"  - Critical findings: `{', '.join(func['findings'])}`")
        print()
else:
    print("None detected!\n")

print("## ðŸ”’ Security Risk Functions (Tested but Vulnerable)\n")
if security_risk_functions:    
    for func in security_risk_functions:
        print(f"- **[`{func['name']}()`]({func['permalink']})** in `{func['file']}`")
        print(f"  - Coverage: **{func['coverage']:.1f}%**")
        print(f"  - Critical findings: `{', '.join(func['findings'])}`")
        print()
else:
    print("None detected!\n")